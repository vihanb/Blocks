/* Generated by Babel */
// Classes
"use strict";

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Point = function Point() {
  _classCallCheck(this, Point);
};

var Range = function Range() {
  _classCallCheck(this, Range);
};

var Matrix = (function () {
  function Matrix() {
    var x = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];
    var y = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

    _classCallCheck(this, Matrix);

    this.Matrix = Array(+y).fill("").map(function () {
      return Array(+x).fill("");
    });
  }

  _createClass(Matrix, [{
    key: "set",
    value: function set(x, y, value) {
      this.Matrix[y - 1][x - 1] = value;
    }
  }, {
    key: "expand",
    value: function expand(x, y) {
      var _this = this;

      this.Matrix = Array(+y).fill(Array(+x).fill("")).map(function (Column, IndexY) {
        return Column.map(function (_, IndexX) {
          return (_this.Matrix[IndexY] || [])[IndexX] || _;
        });
      });
    }
  }]);

  return Matrix;
})();

var Handle = {
  AlignRight: function AlignRight(Matrix) {},
  AlignLeft: function AlignLeft(Matrix) {}
};

var Blocks = function Blocks(code, inputs, opts) {
  // Setup

  var _code$split = code.split(":");

  var _code$split2 = _toArray(_code$split);

  var SetupSize = _code$split2[0];
  var SetupOpt = _code$split2[1];

  var SetupCode = _code$split2.slice(2);

  SetupCode = SetupCode.join(":");

  // Main data
  var MainMatrix = new Matrix(0, 0); // Matrix
  var MainVars = {}; // Variables

  /*=== SETUP START ===*/

  var _SetupSize$split = SetupSize.split(",");

  var _SetupSize$split2 = _slicedToArray(_SetupSize$split, 2);

  var SetupSizeX = _SetupSize$split2[0];
  var SetupSizeY = _SetupSize$split2[1];

  if (SetupSizeY) MainMatrix.expand(SetupSizeX, SetupSizeY);else if (SetupSizeX !== "?") MainMatrix.expand(SetupSizeX, SetupSizeX);

  /*=== Options Start ===*/
  var Options = {
    a: Handle.AlignLeft,
    A: Handle.AlignRight
  };

  return JSON.stringify(MainMatrix.Matrix);
};

Blocks.Golf = function (input, ungolf) {
  return input;
};
